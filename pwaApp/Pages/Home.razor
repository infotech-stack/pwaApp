@page "/"
@inject NavigationManager NavigationManager;
@inject IUserService UserService;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations
@using pwaApp.Services

<div class="container mt-5">
    <h2>Login</h2>
    <EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Username:</label>
            <InputText id="username" class="form-control" @bind-Value="@loginModel.Username" />
            <ValidationMessage For="@(() => loginModel.Username)" />
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="@loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        @if (!isAuthenticated && loginModel.Username != null && loginModel.Password != null)
        {
            <div class="alert alert-danger mt-3">Invalid Username or Password. Please try again.</div>
        }

        <button type="submit" class="btn btn-primary mt-3">Login</button>
    </EditForm>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isAuthenticated = true;

    private void HandleValidSubmit()
    {
        isAuthenticated = AuthenticateUser(loginModel.Username, loginModel.Password);

        if (isAuthenticated)
        {
            // Set username in UserService
            UserService.SetUsername(loginModel.Username);
            NavigationManager.NavigateTo("/welcome");
        }
    }

    private bool AuthenticateUser(string username, string password)
    {
        return username == "charles" && password == "password";
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}
